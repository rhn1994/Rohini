1.The greatest common divisor (GCD) of a and b is the largest number that divides both of them with no remainder. 

One way to find the GCD of two numbers is based on the observation that if r is the remainder when a is divided by b, then gcd(a, b) = gcd(b, r). 

As a base case, we can use gcd(a, 0) = a. Write a function called gcd that takes parameters a and b and returns their greatest common divisor.





def gcd(a,b):

    if(b==0):

        return a

    else:

        return gcd(b,a%b)        





a=int(input("Enter first number:"))

b=int(input("Enter second number:"))

result=gcd(a,b)

print("GCD is: ",result)

2.# A number, a, is a power of b if it is divisible by b and a/b is a power of b.

# Write a function called is_power that takes parameters a and b and returns True if a is a power of b.

# Note: you will have to think about the base case.







def is_power(a,b):



    if a % b == 0:                          

        for i in range(1,a):                 

            if b ** i == a:                   

                return True

    else:

        return False





result = is_power(int(input()),int(input()))

print(result)

3.import math

def eval_loop():

    while(True):

        a=input("Enter the expression to evaluate :")

        if a!='done':

            res=eval(a)

        else:

            print("Last evaluated Result :",res)

            break;

eval_loop()

4.4.#Write a program that computes the decimal equivalent of the binary number 10011?



def binary2decimal(binary):

    decimal = 0

    i = 0

    while binary != 0:

        dec = binary % 10

        decimal = decimal + dec * pow(2, i)

        binary = binary // 10

        i += 1

    return decimal





result = binary2decimal(10011)

print(result)







'''binary = input("Enter a number:")

decimal = 0

for digit in binary:

    decimal=decimal*2+ int(digit)

print(decimal)'''

5.def sum_of_digits(str):

    sum=0

    for i in str:

        if i.isdigit():

            sum=sum+int(i)

    print("Sum of digits in ",str,"is",sum)



string=input("enter a string : ")

sum_of_digits(string)

6.6.# Implement a function that satisfies the specification. Use a try-except block.

# def findAnEven(l):

# 	"""Assumes l is a list of integers

# 	Returns the first even number in l

# 	Raises ValueError if l does not contain an even number"""



def findaneven(l):

    try:

        for number in l:

            if number % 2 == 0:

                print(number)

                break





l = [1,2,3,4,5,6,7,8]

res = findaneven(l)

print(res)

7.# A palindrome is a word that is spelled the same backward and forward, like "Malayalam" and "Noon" . Recursively, a word is a palindrome if the first and last letters are the same and the middle is a palindrome. Write a function called is_palindrome that takes a string argument and returns True if it is a palindrome and False otherwise. Remember that you can use the built-in function len to check the length of a string.

# Use the function definition

# def isPalindrome(s):

# 	"""Assumes s is a str

# 	Returns True if s is a palindrome; False otherwise.

# 	Punctuation marks, blanks, and capitalization are

# 	ignored."""



def isPalingdrome(s):

    string=""

    for i in s:

        string=i+string

    if s!=string:

        print("Not a Palingdrome")

    else:

        print("Palingdrome")



a=input("Enter a string: ")

isPalingdrome(a)

8.8.# The built-in function eval takes a string and evaluates it using the Python interpreter. For example:

# >>> eval('1 + 2 * 3')

# 7

# >>> import math

# >>> eval('math.sqrt(5)')

# 2.2360679774997898

# >>> eval('type(math.pi)')

# <type 'float'>

# Write a function called eval_loop that iteratively prompts the user, takes the resulting input and evaluates it using eval, and prints the result.

# It should continue until the user enters 'done', and then return the value of the last expression it evaluated.





def eval_loop():

    while True:

        n = input("Enter a string:")

        if n == 'done':

            break

        else:

            result = eval(n)

            print(result)

    print(result)



eval_loop()

